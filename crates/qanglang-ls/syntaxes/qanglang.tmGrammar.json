{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "QangLang",
  "scopeName": "source.qanglang",
  "fileTypes": ["ql"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#classes"
    },
    {
      "include": "#lambdas"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.qanglang",
          "match": "//.*$"
        },
        {
          "name": "comment.block.qanglang",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control",
          "match": "\\b(if|else|while|for|break|continue|return|throw|try|catch|finally)\\b"
        },
        {
          "name": "storage.type",
          "match": "\\b(fn|var|class)\\b"
        },
        {
          "name": "keyword.operator.logical",
          "match": "\\b(and|or)\\b"
        },
        {
          "name": "constant.language",
          "match": "\\b(true|false|nil|this|super)\\b"
        },
        {
          "name": "support.type",
          "match": "\\b(STRING|NUMBER|BOOLEAN|NIL|FUNCTION)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape",
              "match": "\\\\[ntr\\\\\"'0]"
            },
            {
              "name": "invalid.illegal.escape",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.decimal.qanglang",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        },
        {
          "name": "constant.numeric.decimal.qanglang",
          "match": "\\.\\d+"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.declaration.qanglang",
          "begin": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration.qanglang"
            },
            "2": {
              "name": "entity.name.function.qanglang"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        },
        {
          "name": "meta.function.call.qanglang",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
          "captures": {
            "1": {
              "name": "entity.name.function.call.qanglang"
            }
          }
        }
      ]
    },
    "function-parameters": {
      "patterns": [
        {
          "name": "variable.parameter.qanglang",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        },
        {
          "name": "punctuation.separator.parameter.qanglang",
          "match": ","
        }
      ]
    },
    "classes": {
      "patterns": [
        {
          "name": "meta.class.declaration.qanglang",
          "begin": "\\b(class)\\s+([a-zA-Z_][a-zA-Z0-9_]*)(?:\\s*(:)\\s*([a-zA-Z_][a-zA-Z0-9_]*))?\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration.qanglang"
            },
            "2": {
              "name": "entity.name.type.class.qanglang"
            },
            "3": {
              "name": "punctuation.separator.inheritance.qanglang"
            },
            "4": {
              "name": "entity.other.inherited-class.qanglang"
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "lambdas": {
      "patterns": [
        {
          "name": "meta.lambda.qanglang",
          "begin": "\\(",
          "end": "\\)\\s*(->)",
          "endCaptures": {
            "1": {
              "name": "keyword.operator.arrow.qanglang"
            }
          },
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.qanglang",
          "match": "="
        },
        {
          "name": "keyword.operator.comparison.qanglang",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.arithmetic.qanglang",
          "match": "(\\+|-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.logical.qanglang",
          "match": "!"
        },
        {
          "name": "keyword.operator.ternary.qanglang",
          "match": "\\?|:"
        },
        {
          "name": "keyword.operator.pipe.qanglang",
          "match": "\\|>"
        },
        {
          "name": "keyword.operator.optional-chaining.qanglang",
          "match": "\\.\\?"
        },
        {
          "name": "keyword.operator.arrow.qanglang",
          "match": "->"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.terminator.statement.qanglang",
          "match": ";"
        },
        {
          "name": "punctuation.separator.comma.qanglang",
          "match": ","
        },
        {
          "name": "punctuation.accessor.qanglang",
          "match": "\\."
        },
        {
          "name": "punctuation.section.brackets.begin.qanglang",
          "match": "[\\[({]"
        },
        {
          "name": "punctuation.section.brackets.end.qanglang",
          "match": "[\\])}]"
        },
        {
          "name": "punctuation.section.object.begin.qanglang",
          "match": ":\\{"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.qanglang",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}
