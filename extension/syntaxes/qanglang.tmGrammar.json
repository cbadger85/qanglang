{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "QangLang",
  "scopeName": "source.qanglang",
  "fileTypes": ["ql"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#classes"
    },
    {
      "include": "#modules"
    },
    {
      "include": "#arrays"
    },
    {
      "include": "#objects"
    },
    {
      "include": "#when-expressions"
    },
    {
      "include": "#map-expressions"
    },
    {
      "include": "#lambdas"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.qanglang",
          "match": "//.*$"
        },
        {
          "name": "comment.block.qanglang",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control",
          "match": "\\b(if|else|while|for|break|continue|return|throw|try|catch|finally|when)\\b"
        },
        {
          "name": "storage.type",
          "match": "\\b(fn|var|class|mod)\\b"
        },
        {
          "name": "keyword.other.import",
          "match": "\\bimport\\b"
        },
        {
          "name": "keyword.operator.logical",
          "match": "\\b(and|or)\\b"
        },
        {
          "name": "constant.language",
          "match": "\\b(true|false|nil|this|super)\\b"
        },
        {
          "name": "support.type",
          "match": "\\b(STRING|NUMBER|BOOLEAN|NIL|FUNCTION|ARRAY|CLASS|OBJECT|MODEL)\\b"
        },
        {
          "name": "support.function.builtin",
          "match": "\\b(print|println|assert|assert_eq|assert_throws|assert_not_nil|typeof|system_time|to_string|array_of_length|hash)\\b"
        },
        {
          "name": "support.function.builtin",
          "match": "\\.(call|apply|to_uppercase|to_lowercase|length|push|pop|reverse|slice|get|concat|remove_at|split|join|ceil|floor|trunc|min|max|iter|to_number|starts_with|ends_with|index_of|contains)(?=\\s|\\(|$)"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape",
              "match": "\\\\[ntr\\\\\"'0]"
            },
            {
              "name": "invalid.illegal.escape",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.decimal.qanglang",
          "match": "\\b\\d+(\\.\\d+)?\\b"
        },
        {
          "name": "constant.numeric.decimal.qanglang",
          "match": "\\.\\d+"
        }
      ]
    },
    "arrays": {
      "patterns": [
        {
          "name": "meta.array.literal.qanglang",
          "begin": "\\[",
          "end": "\\]",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.array.begin.qanglang"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.array.end.qanglang"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "objects": {
      "patterns": [
        {
          "name": "meta.object.literal.qanglang",
          "begin": "\\{\\{",
          "end": "\\}\\}",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.object.begin.qanglang"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.section.object.end.qanglang"
            }
          },
          "patterns": [
            {
              "include": "#object-fields"
            }
          ]
        }
      ]
    },
    "object-fields": {
      "patterns": [
        {
          "name": "meta.object.field.qanglang",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=)",
          "captures": {
            "1": {
              "name": "variable.other.property.qanglang"
            },
            "2": {
              "name": "keyword.operator.assignment.qanglang"
            }
          }
        },
        {
          "include": "$self"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.declaration.qanglang",
          "begin": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration.qanglang"
            },
            "2": {
              "name": "entity.name.function.qanglang"
            }
          },
          "end": "\\)",
          "patterns": [
            {
              "include": "#function-parameters"
            }
          ]
        },
        {
          "name": "meta.function.call.qanglang",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
          "captures": {
            "1": {
              "name": "entity.name.function.call.qanglang"
            }
          }
        }
      ]
    },
    "function-parameters": {
      "patterns": [
        {
          "name": "variable.parameter.qanglang",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        },
        {
          "name": "punctuation.separator.parameter.qanglang",
          "match": ","
        }
      ]
    },
    "classes": {
      "patterns": [
        {
          "name": "meta.class.declaration.qanglang",
          "begin": "\\b(class)\\s+([a-zA-Z_][a-zA-Z0-9_]*)(?:\\s*(:)\\s*([a-zA-Z_][a-zA-Z0-9_]*))?\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration.qanglang"
            },
            "2": {
              "name": "entity.name.type.class.qanglang"
            },
            "3": {
              "name": "punctuation.separator.inheritance.qanglang"
            },
            "4": {
              "name": "entity.other.inherited-class.qanglang"
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "lambdas": {
      "patterns": [
        {
          "name": "meta.lambda.qanglang",
          "match": "\\(\\s*([a-zA-Z_][a-zA-Z0-9_]*(?:\\s*,\\s*[a-zA-Z_][a-zA-Z0-9_]*)*)?\\s*\\)\\s*(->)",
          "captures": {
            "1": {
              "name": "variable.parameter.qanglang"
            },
            "2": {
              "name": "keyword.operator.arrow.qanglang"
            }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.qanglang",
          "match": "(\\+=|-=|\\*=|/=|%=|=)"
        },
        {
          "name": "keyword.operator.comparison.qanglang",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.identity.qanglang",
          "match": "\\bis\\b"
        },
        {
          "name": "keyword.operator.arithmetic.qanglang",
          "match": "(\\+|-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.logical.qanglang",
          "match": "!"
        },
        {
          "name": "keyword.operator.ternary.qanglang",
          "match": "\\?|:"
        },
        {
          "name": "keyword.operator.pipe.qanglang",
          "match": "\\|>"
        },
        {
          "name": "keyword.operator.map.qanglang",
          "match": "\\|\\|"
        },
        {
          "name": "keyword.operator.optional-map.qanglang",
          "match": "\\?\\|"
        },
        {
          "name": "keyword.operator.optional-chaining.qanglang",
          "match": "\\.\\?"
        },
        {
          "name": "keyword.operator.arrow.qanglang",
          "match": "->"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.terminator.statement.qanglang",
          "match": ";"
        },
        {
          "name": "punctuation.separator.comma.qanglang",
          "match": ","
        },
        {
          "name": "punctuation.accessor.qanglang",
          "match": "\\."
        },
        {
          "name": "punctuation.section.brackets.begin.qanglang",
          "match": "[\\[({]"
        },
        {
          "name": "punctuation.section.brackets.end.qanglang",
          "match": "[\\])}]"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.qanglang",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "map-expressions": {
      "patterns": [
        {
          "name": "meta.map-expression.qanglang",
          "begin": "\\|\\|",
          "end": "\\|",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.map.qanglang"
            }
          },
          "endCaptures": {
            "0": {
              "name": "keyword.operator.map.qanglang"
            }
          },
          "patterns": [
            {
              "include": "#map-parameters"
            },
            {
              "include": "#map-arrow"
            },
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "meta.optional-map-expression.qanglang",
          "begin": "\\?\\|",
          "end": "\\|",
          "beginCaptures": {
            "0": {
              "name": "keyword.operator.optional-map.qanglang"
            }
          },
          "endCaptures": {
            "0": {
              "name": "keyword.operator.optional-map.qanglang"
            }
          },
          "patterns": [
            {
              "include": "#map-parameters"
            },
            {
              "include": "#map-arrow"
            },
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "map-parameters": {
      "patterns": [
        {
          "name": "variable.parameter.qanglang",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b(?=\\s*->)"
        }
      ]
    },
    "map-arrow": {
      "patterns": [
        {
          "name": "keyword.operator.arrow.qanglang",
          "match": "->"
        }
      ]
    },
    "modules": {
      "patterns": [
        {
          "name": "meta.module.declaration.qanglang",
          "match": "\\b(mod)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=)\\s*(import)\\s*\\(\\s*(\"[^\"]*\")\\s*\\)",
          "captures": {
            "1": {
              "name": "keyword.declaration.module.qanglang"
            },
            "2": {
              "name": "entity.name.module.qanglang"
            },
            "3": {
              "name": "keyword.operator.assignment.qanglang"
            },
            "4": {
              "name": "support.function.import.qanglang"
            },
            "5": {
              "name": "string.quoted.double.module.path.qanglang"
            }
          }
        }
      ]
    },
    "when-expressions": {
      "patterns": [
        {
          "name": "meta.when-expression.match.qanglang",
          "begin": "\\b(when)\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.when.qanglang"
            },
            "2": {
              "name": "punctuation.section.when.begin.qanglang"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.when.end.qanglang"
            }
          },
          "patterns": [
            {
              "include": "#when-match-subject"
            },
            {
              "include": "#when-body"
            }
          ]
        },
        {
          "name": "meta.when-expression.conditional.qanglang",
          "begin": "\\b(when)\\s*(\\{)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.when.qanglang"
            },
            "2": {
              "name": "punctuation.section.when.begin.qanglang"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.when.end.qanglang"
            }
          },
          "patterns": [
            {
              "include": "#when-body"
            }
          ]
        }
      ]
    },
    "when-match-subject": {
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)\\s*(\\{)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.when-body.begin.qanglang"
            }
          },
          "patterns": [
            {
              "include": "$self"
            }
          ]
        }
      ]
    },
    "when-body": {
      "patterns": [
        {
          "name": "meta.when-arm.qanglang",
          "begin": "\\b(else)\\s*(=>)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control.else.qanglang"
            },
            "2": {
              "name": "keyword.operator.arrow.when.qanglang"
            }
          },
          "end": "(?=[,}])",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "meta.when-arm.type-match.qanglang",
          "begin": "\\b(is)\\s+([A-Z_][A-Z0-9_]*)\\s*(=>)",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.identity.qanglang"
            },
            "2": {
              "name": "support.type.qanglang"
            },
            "3": {
              "name": "keyword.operator.arrow.when.qanglang"
            }
          },
          "end": "(?=[,}])",
          "patterns": [
            {
              "include": "$self"
            }
          ]
        },
        {
          "name": "meta.when-arm.qanglang",
          "begin": "(?<=\\{|,)\\s*",
          "end": "(?=[,}])",
          "patterns": [
            {
              "name": "keyword.operator.arrow.when.qanglang",
              "match": "=>"
            },
            {
              "include": "$self"
            }
          ]
        }
      ]
    }
  }
}
